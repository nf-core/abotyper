/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]
    // fastqc
    withName: FASTQC {
        ext.args = '--quiet'
        publishDir = [
            path: { "${params.outdir}/qc-reports/fastqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    // multiqc
    withName: 'MULTIQC' {
        ext.args   = { params.multiqc_title ? "--title \"$params.multiqc_title\"" : '' }
        publishDir = [
            path: { "${params.outdir}/qc-reports/multiqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    // minimap2/align
    withName: 'MINIMAP2_ALIGN_EXON6' {
        ext.args   = ""
        publishDir = [
            path: { "${params.outdir}/per_sample_processing/${meta.id}/exon6/alignment" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'MINIMAP2_ALIGN_EXON7' {
        ext.args   = ""
        publishDir = [
            path: { "${params.outdir}/per_sample_processing/${meta.id}/exon7/alignment" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    // samtools/coverage   
    withName: 'SAMTOOLS_COVERAGE_EXON6' {
        ext.args   = ""
        ext.prefix = {"${meta.id}.coverage"}
        publishDir = [
            path: { "${params.outdir}/per_sample_processing/${meta.id}/exon6/alignment" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'SAMTOOLS_COVERAGE_EXON7' {
        ext.args   = ""
        ext.prefix = {"${meta.id}.coverage"}
        publishDir = [
            path: { "${params.outdir}/per_sample_processing/${meta.id}/exon7/alignment" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    //samtools/flagstat
    withName: 'SAMTOOLS_FLAGSTAT_EXON6' {
        ext.args   = ""
        publishDir = [
            path: { "${params.outdir}/per_sample_processing/${meta.id}/exon6/alignment" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'SAMTOOLS_FLAGSTAT_EXON7' {
        ext.args   = ""
        publishDir = [
            path: { "${params.outdir}/per_sample_processing/${meta.id}/exon7/alignment" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    // samtools/stats
    withName: 'SAMTOOLS_STATS_EXON6' {
        ext.args   = ""
        publishDir = [
            path: { "${params.outdir}/per_sample_processing/${meta.id}/exon6/alignment" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'SAMTOOLS_STATS_EXON7' {
        ext.args   = ""
        publishDir = [
            path: { "${params.outdir}/per_sample_processing/${meta.id}/exon7/alignment" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    // makeindex || intervals from fasta fai 
    withName: 'MAKEINDEX' {
        publishDir = [
            enabled: false
        ]
    }
    // samtools/mpileup
    withName: 'NFCORE_ABOTYPER:ABOTYPER:VARIANTS_QUANTIFICATION:SAMTOOLS_MPILEUP_EXON6' {
        ext.args   = "-aa --count-orphans --ignore-overlaps-removal --max-depth 1000000"
        publishDir = [
            path: { "${params.outdir}/per_sample_processing/${meta.id}/exon6/mpileup" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'NFCORE_ABOTYPER:ABOTYPER:VARIANTS_QUANTIFICATION:SAMTOOLS_MPILEUP_EXON7' {
        ext.args   = "-aa --count-orphans --ignore-overlaps-removal --max-depth 1000000"
        publishDir = [
            path: { "${params.outdir}/per_sample_processing/${meta.id}/exon7/mpileup" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // mpileup nucleotides frequency
    withName: 'NFCORE_ABOTYPER:ABOTYPER:VARIANTS_QUANTIFICATION:MPILEUP_EXON6_NUCL_FREQ' {
        ext.args   = ""
        publishDir = [
            path: { "${params.outdir}/per_sample_processing/${meta.id}/exon6" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'NFCORE_ABOTYPER:ABOTYPER:VARIANTS_QUANTIFICATION:MPILEUP_EXON7_NUCL_FREQ' {
        ext.args   = ""
        publishDir = [
            path: { "${params.outdir}/per_sample_processing/${meta.id}/exon7" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    // predict abo phenotype
        // Extract snps relevant to ABO phenotyping
    withName: 'SNPS_EXON6' {
        ext.args   = ""
        publishDir = [
            path: { "${params.outdir}/per_sample_processing/${meta.id}/exon6" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'SNPS_EXON7' {
        ext.args   = ""
        publishDir = [
            path: { "${params.outdir}/per_sample_processing/${meta.id}/exon7" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
        // Aggregate snps and compute phenotype and genotype
    withName: 'PREDICTABOPHENOTYPE' {
        ext.args   = ""
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}
